diff --git a/mythtv/libs/libmyth/mythmediamonitor.cpp b/mythtv/libs/libmyth/mythmediamonitor.cpp
index 3dac2ff..1d3d47b 100644
--- mythtv/libs/libmyth/mythmediamonitor.cpp
+++ mythtv/libs/libmyth/mythmediamonitor.cpp
@@ -362,6 +362,9 @@ bool MediaMonitor::RemoveDevice(const QString &dev)
     {
         if ((*it)->getDevicePath() == dev)
         {
+            // Ensure device gets an unmount
+            (*it)->checkMedia();
+
             if (m_UseCount[*it] == 0)
             {
                 (*it)->deleteLater();
@@ -643,6 +643,10 @@ void MediaMonitor::JumpToMediaHandler(MythMediaDevice* pMedia)
     // if user didn't cancel, selected = handlers.at(choice);
     int selected = 0;
 
+    GetMythMainWindow()->JumpTo("Main Menu");
+    QTime t; t.start();
+    while (GetMythMainWindow()->IsExitingToMain() && t.elapsed() < 2000)
+        qApp->processEvents(); // Ensure jump is executed before calling handler
     handlers.at(selected).callback(pMedia);
 }
 
@@ -672,7 +677,9 @@ void MediaMonitor::mediaStatusChanged(MythMediaStatus oldStatus,
     // This gets called from outside the main thread so we need
     // to post an event back to the main thread.
     // We now send events for all non-error statuses, so plugins get ejects
-    if (stat != MEDIASTAT_ERROR && stat != MEDIASTAT_UNKNOWN)
+    if (stat != MEDIASTAT_ERROR && stat != MEDIASTAT_UNKNOWN &&
+        // Don't send an event for a new device that's not mounted
+        !(oldStatus == MEDIASTAT_UNPLUGGED && stat == MEDIASTAT_NOTMOUNTED))
     {
         // Should we ValidateAndLock() first?
         QEvent *e = new MythMediaEvent(stat, pMedia);
diff --git a/mythtv/libs/libmythbase/mythhdd.cpp b/mythtv/libs/libmythbase/mythhdd.cpp
index 86f2018..0265d57 100644
--- mythtv/libs/libmythbase/mythhdd.cpp
+++ mythtv/libs/libmythbase/mythhdd.cpp
@@ -41,9 +41,18 @@ MediaStatus MythHDD::checkMedia(void)
         return setStatus(MEDIASTAT_MOUNTED);
     }
 
+    // Has device been removed?
+    if (!isDeviceOpen())
+    {
+        if (!openDevice())
+            return setStatus(MEDIASTAT_UNPLUGGED);
+        closeDevice();
+    }
+
     // device is not mounted
-    if (m_Status == MEDIASTAT_UNPLUGGED)
+    switch (m_Status)
     {
+    case MEDIASTAT_UNPLUGGED:
         // a removable device was just plugged in try to mount it.
         mount();
         if (isMounted())
@@ -51,16 +60,11 @@ MediaStatus MythHDD::checkMedia(void)
             m_Status = MEDIASTAT_NOTMOUNTED;
             return setStatus(MEDIASTAT_MOUNTED);
         }
-        else
-            return setStatus(MEDIASTAT_NOTMOUNTED);
-    }
-    else if (m_Status == MEDIASTAT_MOUNTED)
-    {
+        return setStatus(MEDIASTAT_NOTMOUNTED);
+    case MEDIASTAT_MOUNTED:
         // device was mounted and someone unmounted it.
-        return m_Status = setStatus(MEDIASTAT_NOTMOUNTED);
-    }
-    else
-    {
+        return setStatus(MEDIASTAT_NOTMOUNTED);
+    default:
         // leave device state as is
         return m_Status;
     }
diff --git a/mythtv/libs/libmythbase/mythcdrom-linux.cpp b/mythtv/libs/libmythbase/mythcdrom-linux.cpp
index 6c5b0d0..eea65d5 100644
--- mythtv/libs/libmythbase/mythcdrom-linux.cpp
+++ mythtv/libs/libmythbase/mythcdrom-linux.cpp
@@ -19,7 +19,9 @@
 #define LOC_ERR QString("MythCDROMLinux, Error: ")
 
 // On a mixed-mode disc (audio+data), set this to 0 to mount the data portion:
+#ifndef ASSUME_WANT_AUDIO
 #define ASSUME_WANT_AUDIO 1
+#endif
 
 
 // Some features cannot be detected (reliably) using the standard
@@ -432,6 +434,15 @@ MediaStatus MythCDROMLinux::checkMedia()
     // If we have tried to mount and failed, don't keep trying
     if (m_Status == MEDIASTAT_ERROR)
     {
+        // Check if an external agent (like Gnome/KDE) mounted the disk
+        if (isMounted())
+        {
+            onDeviceMounted();
+            // pretend we're NOTMOUNTED so setStatus emits a signal
+            m_Status = MEDIASTAT_NOTMOUNTED;
+            return setStatus(MEDIASTAT_MOUNTED, OpenedHere);
+        }
+
         VERBOSE(VB_MEDIA+VB_EXTRA, "Disc is unmountable?");
         if (OpenedHere)
             closeDevice();
@@ -510,18 +521,23 @@ MediaStatus MythCDROMLinux::checkMedia()
             }
             case CDS_AUDIO:
                 VERBOSE(VB_MEDIA, "found an audio disk");
+                // pretend we're NOTMOUNTED so setStatus emits a signal
+                m_Status = MEDIASTAT_NOTMOUNTED;
                 m_MediaType = MEDIATYPE_AUDIO;
                 return setStatus(MEDIASTAT_USEABLE, OpenedHere);
                 break;
             case CDS_MIXED:
-                m_MediaType = MEDIATYPE_MIXED;
                 VERBOSE(VB_MEDIA, "found a mixed CD");
                 // Note: Mixed mode CDs require an explixit mount call
                 //       since we'll usually want the audio portion.
                 // undefine ASSUME_WANT_AUDIO to change this behavior.
-                #ifdef ASSUME_WANT_AUDIO
+                #if ASSUME_WANT_AUDIO
+                    // pretend we're NOTMOUNTED so setStatus emits a signal
+                    m_Status = MEDIASTAT_NOTMOUNTED;
+                    m_MediaType = MEDIATYPE_AUDIO;
                     return setStatus(MEDIASTAT_USEABLE, OpenedHere);
                 #else
+                    m_MediaType = MEDIATYPE_MIXED;
                     mount();
                     if (isMounted())
                     {
diff --git a/mythtv/libs/libmyth/mediamonitor-windows.cpp b/mythtv/libs/libmyth/mediamonitor-windows.cpp
index acdc8b7..3fb6230 100644
--- mythtv/libs/libmyth/mediamonitor-windows.cpp
+++ mythtv/libs/libmyth/mediamonitor-windows.cpp
@@ -26,39 +26,66 @@ MediaMonitorWindows::MediaMonitorWindows(QObject* par,
 {
     char strDrives[128];
     if (!::GetLogicalDriveStrings(sizeof(strDrives), strDrives))
+    {
+        VERBOSE(VB_IMPORTANT,
+            "Error. MediaMonitorWindows failed at GetLogicalDriveStrings.");
         return;
+    }
 
     for (char *driveName = strDrives; *driveName;
          driveName += strlen(driveName) + 1)
     {
-        uint type = ::GetDriveType(driveName);
-        if (type != DRIVE_REMOVABLE && type != DRIVE_CDROM)
-            continue;
-
         MythMediaDevice *media = NULL;
-
-        if (type == DRIVE_CDROM)
+        UINT type = ::GetDriveType(driveName);
+        switch (type)
+        {
+        case DRIVE_CDROM:
+            VERBOSE(VB_MEDIA+VB_EXTRA,
+                QString("MediaMonitorWindows found cdrom '%1'").arg(driveName));
             media = MythCDROM::get(this, driveName, false, allowEject);
-        else
+            break;
+        case DRIVE_REMOVABLE:
+            VERBOSE(VB_MEDIA+VB_EXTRA,
+                QString("MediaMonitorWindows found removeable '%1'")
+                    .arg(driveName));
             media = MythHDD::Get(this, driveName, false, allowEject);
-
-        if (!media)
-        {
-            VERBOSE(VB_IMPORTANT,
-                    "Error. Couldn't create MythMediaDevice.");
-            return;
+            break;
+        case DRIVE_UNKNOWN:
+            VERBOSE(VB_MEDIA+VB_EXTRA,
+                QString("MediaMonitorWindows found unknown '%1'")
+                    .arg(driveName));
+            media = MythCDROM::get(this, driveName, false, allowEject);
+            break;
+        case DRIVE_NO_ROOT_DIR:
+            VERBOSE(VB_MEDIA+VB_EXTRA,
+                QString("MediaMonitorWindows found '%1' with no root dir")
+                    .arg(driveName));
+            media = MythCDROM::get(this, driveName, false, allowEject);
+            break;
+        default:
+            VERBOSE(VB_MEDIA, QString("MediaMonitorWindows found '%1' type %2")
+                .arg(driveName).arg(type));
+        case DRIVE_FIXED:
+        case DRIVE_REMOTE:
+        case DRIVE_RAMDISK:
+            continue;
         }
 
-        // We store the volume name to improve
-        // user activities like ChooseAndEjectMedia().
-        char volumeName[MAX_PATH];
-        if (GetVolumeInformation(driveName, volumeName, MAX_PATH,
-                                 NULL, NULL, NULL, NULL, NULL))
+        if (media)
         {
-            media->setVolumeID(volumeName);
+            // We store the volume name to improve
+            // user activities like ChooseAndEjectMedia().
+            char volumeName[MAX_PATH];
+            if (GetVolumeInformation(driveName, volumeName, MAX_PATH,
+                                     NULL, NULL, NULL, NULL, NULL))
+            {
+                media->setVolumeID(volumeName);
+            }
+
+            AddDevice(media);
         }
-
-        AddDevice(media);
+        else
+            VERBOSE(VB_IMPORTANT, "Error. Couldn't create MythMediaDevice.");
     }
 
     VERBOSE(VB_MEDIA, "Initial device list: " + listDevices());
